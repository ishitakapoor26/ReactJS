{"id":"../../node_modules/axios/lib/helpers/isURLSameOrigin.js","dependencies":[{"name":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\package.json","includedInParent":true,"mtime":1731762334852},{"name":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1731488550346},{"name":"./../utils.js","loc":{"line":3,"column":18,"index":33},"parent":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\node_modules\\axios\\lib\\helpers\\isURLSameOrigin.js","resolved":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\node_modules\\axios\\lib\\utils.js"},{"name":"../platform/index.js","loc":{"line":4,"column":21,"index":71},"parent":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\node_modules\\axios\\lib\\helpers\\isURLSameOrigin.js","resolved":"C:\\Users\\ISHITA KAPOOR\\Desktop\\ReactJS\\NodeJS\\natours\\node_modules\\axios\\lib\\platform\\index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _utils = _interopRequireDefault(require(\"./../utils.js\"));\nvar _index = _interopRequireDefault(require(\"../platform/index.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar _default = exports.default = _index.default.hasStandardBrowserEnv ?\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n  const msie = _index.default.navigator && /(msie|trident)/i.test(_index.default.navigator.userAgent);\n  const urlParsingNode = document.createElement('a');\n  let originURL;\n\n  /**\n  * Parse a URL to discover its components\n  *\n  * @param {String} url The URL to be parsed\n  * @returns {Object}\n  */\n  function resolveURL(url) {\n    let href = url;\n    if (msie) {\n      // IE needs attribute set twice to normalize properties\n      urlParsingNode.setAttribute('href', href);\n      href = urlParsingNode.href;\n    }\n    urlParsingNode.setAttribute('href', href);\n\n    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname\n    };\n  }\n  originURL = resolveURL(window.location.href);\n\n  /**\n  * Determine if a URL shares the same origin as the current location\n  *\n  * @param {String} requestURL The URL to test\n  * @returns {boolean} True if URL shares the same origin, otherwise false\n  */\n  return function isURLSameOrigin(requestURL) {\n    const parsed = _utils.default.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n  };\n}() :\n// Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}();"},"sourceMaps":null,"error":null,"hash":"c630dd50939da86b0d00d802404b11d7","cacheData":{"env":{}}}